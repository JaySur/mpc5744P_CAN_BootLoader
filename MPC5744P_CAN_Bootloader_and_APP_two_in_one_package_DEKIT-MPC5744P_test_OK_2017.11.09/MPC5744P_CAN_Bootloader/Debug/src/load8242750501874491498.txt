powerpc-eabivle-objdump -d -S -x "src\\load.o" 

src\load.o:     file format elf32-powerpc
src\load.o
architecture: powerpc:vle, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  00000000  00000000  00000044  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  00000000  00000000  0000004c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  00000000  00000000  00000054  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  00000000  00000000  0000005c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  00000000  00000000  00000064  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  00000000  00000000  0000006c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  00000000  00000000  00000074  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  00000000  00000000  0000007c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  00000000  00000000  00000084  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  00000000  00000000  0000008c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  00000000  00000000  00000094  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  00000000  00000000  0000009c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  00000000  00000000  000000a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  00000000  00000000  000000ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .text         00000000  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE, VLE
 17 .data         00000000  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .bss          00000000  00000000  00000000  000000b4  2**0
                  ALLOC
 19 .text.SRcdCvt 00000274  00000000  00000000  000000b4  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE, VLE
 20 .text.SrcdAlign4W 0000011e  00000000  00000000  00000328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE, VLE
 21 .text.hex2value 000000d8  00000000  00000000  00000448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE, VLE
 22 .text.RcvDtProc 0000009e  00000000  00000000  00000520  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE, VLE
 23 .text.StatusAck 00000096  00000000  00000000  000005c0  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE, VLE
 24 .text.CleanRAM 00000084  00000000  00000000  00000658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE, VLE
 25 .text.Prepare_Before_Jump 0000002a  00000000  00000000  000006dc  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE, VLE
 26 .debug_info   000004f9  00000000  00000000  00000706  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 27 .debug_abbrev 00000172  00000000  00000000  00000bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_aranges 00000050  00000000  00000000  00000d71  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 29 .debug_ranges 00000040  00000000  00000000  00000dc1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 30 .debug_macro  000000ef  00000000  00000000  00000e01  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 31 .debug_macro  0000061c  00000000  00000000  00000ef0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 32 .debug_macro  00000052  00000000  00000000  0000150c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 33 .debug_macro  000000a0  00000000  00000000  0000155e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 34 .debug_macro  00000016  00000000  00000000  000015fe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 35 .debug_macro  00000064  00000000  00000000  00001614  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 36 .debug_macro  000001a3  00000000  00000000  00001678  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 37 .debug_macro  00000133  00000000  00000000  0000181b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 38 .debug_macro  0000009d  00000000  00000000  0000194e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 39 .debug_macro  00000010  00000000  00000000  000019eb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 40 .debug_macro  0000015b  00000000  00000000  000019fb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 41 .debug_macro  00000028  00000000  00000000  00001b56  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 42 .debug_macro  00000058  00000000  00000000  00001b7e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 43 .debug_macro  0000b50a  00000000  00000000  00001bd6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 44 .debug_macro  00000094  00000000  00000000  0000d0e0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 45 .debug_macro  0000002e  00000000  00000000  0000d174  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 46 .debug_macro  000001ad  00000000  00000000  0000d1a2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 47 .debug_line   0000034f  00000000  00000000  0000d34f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 48 .debug_str    00038069  00000000  00000000  0000d69e  2**0
                  CONTENTS, READONLY, DEBUGGING
 49 .comment      0000008f  00000000  00000000  00045707  2**0
                  CONTENTS, READONLY
 50 .PPC.EMB.apuinfo 00000018  00000000  00000000  00045796  2**0
                  CONTENTS, READONLY
 51 .debug_frame  0000011c  00000000  00000000  000457b0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 load.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .text.SRcdCvt	00000000 .text.SRcdCvt
00000000 l    d  .text.SrcdAlign4W	00000000 .text.SrcdAlign4W
00000000 l    d  .text.hex2value	00000000 .text.hex2value
00000000 l    d  .text.RcvDtProc	00000000 .text.RcvDtProc
00000000 l    d  .text.StatusAck	00000000 .text.StatusAck
00000000 l    d  .text.CleanRAM	00000000 .text.CleanRAM
00000000 l    d  .text.Prepare_Before_Jump	00000000 .text.Prepare_Before_Jump
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l       .group	00000000 wm4.0.0127509615e603531c663282594fce3c
00000000 l       .group	00000000 wm4.lib_c99.prefix.8.3580c292f50811c682d980dc4180498e
00000000 l       .group	00000000 wm4.common.prefix.16.d7bf937cdf46fd76dde96b376e3b328a
00000000 l       .group	00000000 wm4.ewl_c_version.h.9.0bcb57d6a3f89baae1f9b121de2772f5
00000000 l       .group	00000000 wm4.os_enum.h.9.f9446d6af68b3fa72a37d4d924d3b347
00000000 l       .group	00000000 wm4.ansi_prefix.PA_EABI.bare.h.13.bc4260de00d13d22e2cf5282b051804c
00000000 l       .group	00000000 wm4.ansi_parms.h.64.1ef44042fa7eb65a5fea92aff5b4a219
00000000 l       .group	00000000 wm4.limits_api.h.9.bc6daa20b3abae2bba6c512044e73b43
00000000 l       .group	00000000 wm4.ewl_lib_ext1.h.14.f9b057cc049671136093886db2a3473f
00000000 l       .group	00000000 wm4.cstdint.134.0ece0ba0ee759ce9e45a8fa510ec0d93
00000000 l       .group	00000000 wm4.wchar_t.h.9.94198016f5b5f455e54ea1f3f054b416
00000000 l       .group	00000000 wm4.cstdint.246.0573fcc3ea2319479988f90b448d87e4
00000000 l       .group	00000000 wm4.MPC5744P.h.12325.7e8b3a2af2e1d37e126914b9b1a6c579
00000000 l       .group	00000000 wm4.load.h.3.519d76060f99913a50293ee2823b21cc
00000000 l       .group	00000000 wm4.compiler_api.h.8.e92a4cad49af46355e7f6b7212feddaa
00000000 l       .group	00000000 wm4.FlexCAN_api.h.105.c898dcd8b17b62df9ffe1609ec54edfc
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .PPC.EMB.apuinfo	00000000 .PPC.EMB.apuinfo
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000000 l    d  .group	00000000 .group
00000030       O *COM*	00000004 srcd
00000000 g     F .text.SRcdCvt	00000274 SRcdCvt
00000000 g     F .text.hex2value	000000d8 hex2value
00000000 g     F .text.SrcdAlign4W	0000011e SrcdAlign4W
00000000 g     F .text.RcvDtProc	0000009e RcvDtProc
00000000         *UND*	00000000 CAN_TxMsg
00000000         *UND*	00000000 CAN0_TransmitMsg
00000000         *UND*	00000000 CAN0_BufferReceive_Flag
00000000 g     F .text.StatusAck	00000096 StatusAck
00000000 g     F .text.CleanRAM	00000084 CleanRAM
00000000 g     F .text.Prepare_Before_Jump	0000002a Prepare_Before_Jump
00000000         *UND*	00000000 flexcan_0_deinit_fnc



Disassembly of section .text.SRcdCvt:

00000000 <SRcdCvt>:
****           format for further process  
**** input   *line: the original S-record line strings
**** output *srcd_t: the converted result in  SRecord_t construct format
*********************************************************************************/
uint8_t SRcdCvt(uint8_t * line, SRecord_t *srcd_t)
{   
   0:	18 21 06 d8 	e_stwu  r1,-40(r1)
   4:	00 80       	se_mflr r0
   6:	db 01       	se_stw  r0,44(r1)
   8:	1b c1 09 20 	e_stmw  r30,32(r1)
   c:	01 1f       	se_mr   r31,r1
   e:	d6 3f       	se_stw  r3,24(r31)
  10:	d7 4f       	se_stw  r4,28(r31)
    uint8_t  stype,adrlen,slength,sdata,sdtlen,oddflag=0;
  12:	48 07       	se_li   r7,0
  14:	98 7f       	se_stb  r7,8(r31)
    uint8_t  checksum = 0;
  16:	48 07       	se_li   r7,0
  18:	99 7f       	se_stb  r7,9(r31)
    uint16_t  i;
    uint8_t  *sbuffer;
  
    if(*line!='S')      /*S19 line must start with char 'S'*/
  1a:	c6 7f       	se_lwz  r7,24(r31)
  1c:	80 77       	se_lbz  r7,0(r7)
  1e:	00 c7       	se_extzb r7
  20:	70 07 a8 53 	e_cmpl16i r7,83
  24:	7f 80 00 20 	e_mcrf  cr7
  28:	7c e0 00 26 	mfcr    r7
  2c:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  30:	7c e8 01 20 	mtcrf   128,r7
  34:	7a 12 00 10 	e_beq   44 <SRcdCvt+0x44>
    {
        srcd_t->dtlen=0;/*if not, the length set to zero and error report*/      
  38:	c7 7f       	se_lwz  r7,28(r31)
  3a:	48 06       	se_li   r6,0
  3c:	d1 67       	se_stw  r6,4(r7)
		    return SERR;
  3e:	48 17       	se_li   r7,1
  40:	78 00 02 20 	e_b     260 <SRcdCvt+0x260>
    }
		
    line++;             /*move to next char*/
  44:	c6 7f       	se_lwz  r7,24(r31)
  46:	20 07       	se_addi r7,1
  48:	d6 7f       	se_stw  r7,24(r31)
    stype = *line - '0';/*indentify the S19 line type*/	
  4a:	c6 7f       	se_lwz  r7,24(r31)
  4c:	80 77       	se_lbz  r7,0(r7)
  4e:	00 c7       	se_extzb r7
  50:	18 e7 84 d0 	e_addi  r7,r7,-48
  54:	9c 7f       	se_stb  r7,12(r31)

	if(stype == 0)
  56:	8c 7f       	se_lbz  r7,12(r31)
  58:	00 c7       	se_extzb r7
  5a:	2a 07       	se_cmpi r7,0
  5c:	7f 80 00 20 	e_mcrf  cr7
  60:	7c e0 00 26 	mfcr    r7
  64:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  68:	7c e8 01 20 	mtcrf   128,r7
  6c:	7a 02 00 10 	e_bne   7c <SRcdCvt+0x7c>
	{   /*S0 indicate the S19 file start and information, not useful for bootloader*/
		srcd_t->dtlen=0;
  70:	c7 7f       	se_lwz  r7,28(r31)
  72:	48 06       	se_li   r6,0
  74:	d1 67       	se_stw  r6,4(r7)
		return SFileStart;
  76:	48 27       	se_li   r7,2
  78:	78 00 01 e8 	e_b     260 <SRcdCvt+0x260>
	}
	else if(stype>6)
  7c:	8c 7f       	se_lbz  r7,12(r31)
  7e:	00 c7       	se_extzb r7
  80:	22 57       	se_cmpli r7,6
  82:	7f 80 00 20 	e_mcrf  cr7
  86:	7c e0 00 26 	mfcr    r7
  8a:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  8e:	7c e8 01 20 	mtcrf   128,r7
  92:	7a 01 00 10 	e_ble   a2 <SRcdCvt+0xa2>
		{   /*S7/8/9 indicates the S19 file end*/
			srcd_t->dtlen=0;
  96:	c7 7f       	se_lwz  r7,28(r31)
  98:	48 06       	se_li   r6,0
  9a:	d1 67       	se_stw  r6,4(r7)
			return SFileEnd;
  9c:	48 37       	se_li   r7,3
  9e:	78 00 01 c2 	e_b     260 <SRcdCvt+0x260>
		}
		else 
		{
			 adrlen = stype+1;            /*adrlen(address length) is the number of bytes of addr. 16bit@2B, 24bit@3B, 32bit@4B*/
  a2:	8c 7f       	se_lbz  r7,12(r31)
  a4:	20 07       	se_addi r7,1
  a6:	9d 7f       	se_stb  r7,13(r31)

			 line++;
  a8:	c6 7f       	se_lwz  r7,24(r31)
  aa:	20 07       	se_addi r7,1
  ac:	d6 7f       	se_stw  r7,24(r31)

			 slength=hex2value(line);   /*get the bytes number of addr. data & checksum  */
  ae:	c6 3f       	se_lwz  r3,24(r31)
  b0:	78 00 00 01 	e_bl    b0 <SRcdCvt+0xb0>
			b0: R_PPC_VLE_REL24	hex2value
  b4:	01 37       	se_mr   r7,r3
  b6:	9e 7f       	se_stb  r7,14(r31)

			 sdtlen=slength-adrlen-1;   /*get data length in bytes, remove one CRC uint8_t at line end */
  b8:	8e 6f       	se_lbz  r6,14(r31)
  ba:	8d 7f       	se_lbz  r7,13(r31)
  bc:	07 67       	se_subf r7,r6
  be:	00 c7       	se_extzb r7
  c0:	18 e7 84 ff 	e_addi  r7,r7,-1
  c4:	9f 7f       	se_stb  r7,15(r31)

			if(sdtlen&0x01)
  c6:	8f 7f       	se_lbz  r7,15(r31)
  c8:	00 c7       	se_extzb r7
  ca:	2e 17       	se_andi r7,1
  cc:	2a 07       	se_cmpi r7,0
  ce:	7f 80 00 20 	e_mcrf  cr7
  d2:	7c e0 00 26 	mfcr    r7
  d6:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  da:	7c e8 01 20 	mtcrf   128,r7
  de:	7a 12 00 08 	e_beq   e6 <SRcdCvt+0xe6>
			{                          /*if odd number of bytes      */
				oddflag=1;             /*the last uint8_t will be trancated and processed later*/
  e2:	48 17       	se_li   r7,1
  e4:	98 7f       	se_stb  r7,8(r31)
			}

			srcd_t->dtlen = (uint16_t)(sdtlen>>1);  /*data lenghth in uint16_t*/
  e6:	8f 7f       	se_lbz  r7,15(r31)
  e8:	00 c7       	se_extzb r7
  ea:	68 17       	se_srwi r7,1
  ec:	00 c7       	se_extzb r7
  ee:	01 76       	se_mr   r6,r7
  f0:	c7 7f       	se_lwz  r7,28(r31)
  f2:	d1 67       	se_stw  r6,4(r7)

			checksum += slength;  /*checksum includes all data bytes + address uint8_t + length uint8_t, this is the length uint8_t*/
  f4:	89 6f       	se_lbz  r6,9(r31)
  f6:	8e 7f       	se_lbz  r7,14(r31)
  f8:	7c e6 3a 14 	add     r7,r6,r7
  fc:	99 7f       	se_stb  r7,9(r31)

			line += 2;      	 /*increase 2byte text/per char */
  fe:	c6 7f       	se_lwz  r7,24(r31)
 100:	20 17       	se_addi r7,2
 102:	d6 7f       	se_stw  r7,24(r31)
      
			for(srcd_t->addr=0,i=0; i<adrlen; i++,line=line+2) /*get the S-record line address*/
 104:	c7 7f       	se_lwz  r7,28(r31)
 106:	48 06       	se_li   r6,0
 108:	d0 67       	se_stw  r6,0(r7)
 10a:	48 07       	se_li   r7,0
 10c:	b5 7f       	se_sth  r7,10(r31)
 10e:	78 00 00 3e 	e_b     14c <SRcdCvt+0x14c>
			{
			    sdata = hex2value(line);                  /*the uint8_t from 2 chars*/
 112:	c6 3f       	se_lwz  r3,24(r31)
 114:	78 00 00 01 	e_bl    114 <SRcdCvt+0x114>
			114: R_PPC_VLE_REL24	hex2value
 118:	01 37       	se_mr   r7,r3
 11a:	34 ff 00 10 	e_stb   r7,16(r31)
				srcd_t->addr = (srcd_t->addr<<8) + sdata; /*re-construct the address*/
 11e:	c7 7f       	se_lwz  r7,28(r31)
 120:	c0 77       	se_lwz  r7,0(r7)
 122:	7c e6 40 70 	e_slwi  r6,r7,8
 126:	30 ff 00 10 	e_lbz   r7,16(r31)
 12a:	00 c7       	se_extzb r7
 12c:	04 76       	se_add  r6,r7
 12e:	c7 7f       	se_lwz  r7,28(r31)
 130:	d0 67       	se_stw  r6,0(r7)
				checksum+=sdata;							/*checksum includes all data bytes + address uint8_t + length uint8_t, here is the address bytes*/
 132:	89 6f       	se_lbz  r6,9(r31)
 134:	30 ff 00 10 	e_lbz   r7,16(r31)
 138:	7c e6 3a 14 	add     r7,r6,r7
 13c:	99 7f       	se_stb  r7,9(r31)
			for(srcd_t->addr=0,i=0; i<adrlen; i++,line=line+2) /*get the S-record line address*/
 13e:	a5 7f       	se_lhz  r7,10(r31)
 140:	00 e7       	se_extzh r7
 142:	20 07       	se_addi r7,1
 144:	b5 7f       	se_sth  r7,10(r31)
 146:	c6 7f       	se_lwz  r7,24(r31)
 148:	20 17       	se_addi r7,2
 14a:	d6 7f       	se_stw  r7,24(r31)
 14c:	8d 7f       	se_lbz  r7,13(r31)
 14e:	00 c7       	se_extzb r7
 150:	00 e7       	se_extzh r7
 152:	a5 6f       	se_lhz  r6,10(r31)
 154:	00 e6       	se_extzh r6
 156:	7f 86 38 40 	cmplw   cr7,r6,r7
 15a:	7c e0 00 26 	mfcr    r7
 15e:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
 162:	7c e8 01 20 	mtcrf   128,r7
 166:	7a 10 ff ac 	e_blt   112 <SRcdCvt+0x112>
			}                                             /*calculate the S-record line CRC checksum*/
        
			sbuffer = (uint8_t *)&(srcd_t->data[0]);  		/*assign the buffer pointer to the S-Record data array*/
 16a:	c7 7f       	se_lwz  r7,28(r31)
 16c:	20 77       	se_addi r7,8
 16e:	d5 7f       	se_stw  r7,20(r31)

			for(i=0; i<srcd_t->dtlen*2; i++)
 170:	48 07       	se_li   r7,0
 172:	b5 7f       	se_sth  r7,10(r31)
 174:	78 00 00 3a 	e_b     1ae <SRcdCvt+0x1ae>
			{
			  	 sdata = hex2value(line);                /*the uint8_t from 2 chars*/
 178:	c6 3f       	se_lwz  r3,24(r31)
 17a:	78 00 00 01 	e_bl    17a <SRcdCvt+0x17a>
			17a: R_PPC_VLE_REL24	hex2value
 17e:	01 37       	se_mr   r7,r3
 180:	34 ff 00 10 	e_stb   r7,16(r31)
				 line +=  2;
 184:	c6 7f       	se_lwz  r7,24(r31)
 186:	20 17       	se_addi r7,2
 188:	d6 7f       	se_stw  r7,24(r31)
				 *((uint8_t*)(sbuffer+i)) = sdata;       /*store the parsed data to srcd_t construct*/
 18a:	a5 7f       	se_lhz  r7,10(r31)
 18c:	00 e7       	se_extzh r7
 18e:	c5 6f       	se_lwz  r6,20(r31)
 190:	7c e6 3a 14 	add     r7,r6,r7
 194:	30 df 00 10 	e_lbz   r6,16(r31)
 198:	90 67       	se_stb  r6,0(r7)
				 checksum += sdata;                      /*checksum includes all data bytes + address uint8_t + length uint8_t, here is the data bytes*/
 19a:	89 6f       	se_lbz  r6,9(r31)
 19c:	30 ff 00 10 	e_lbz   r7,16(r31)
 1a0:	7c e6 3a 14 	add     r7,r6,r7
 1a4:	99 7f       	se_stb  r7,9(r31)
			for(i=0; i<srcd_t->dtlen*2; i++)
 1a6:	a5 7f       	se_lhz  r7,10(r31)
 1a8:	00 e7       	se_extzh r7
 1aa:	20 07       	se_addi r7,1
 1ac:	b5 7f       	se_sth  r7,10(r31)
 1ae:	a5 7f       	se_lhz  r7,10(r31)
 1b0:	74 e6 04 3f 	e_rlwinm r6,r7,0,16,31
 1b4:	c7 7f       	se_lwz  r7,28(r31)
 1b6:	c1 77       	se_lwz  r7,4(r7)
 1b8:	6c 17       	se_slwi r7,1
 1ba:	7f 86 38 40 	cmplw   cr7,r6,r7
 1be:	7c e0 00 26 	mfcr    r7
 1c2:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
 1c6:	7c e8 01 20 	mtcrf   128,r7
 1ca:	7a 10 ff ae 	e_blt   178 <SRcdCvt+0x178>
		    }

		}
		
		/* line point to last uint8_t (which has not been processed) now, the SRecord checksum is immediately after the last uint8_t  */
		if(oddflag)
 1ce:	88 7f       	se_lbz  r7,8(r31)
 1d0:	00 c7       	se_extzb r7
 1d2:	2a 07       	se_cmpi r7,0
 1d4:	7f 80 00 20 	e_mcrf  cr7
 1d8:	7c e0 00 26 	mfcr    r7
 1dc:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
 1e0:	7c e8 01 20 	mtcrf   128,r7
 1e4:	7a 12 00 4a 	e_beq   22e <SRcdCvt+0x22e>
		{
			sdata = hex2value(line);
 1e8:	c6 3f       	se_lwz  r3,24(r31)
 1ea:	78 00 00 01 	e_bl    1ea <SRcdCvt+0x1ea>
			1ea: R_PPC_VLE_REL24	hex2value
 1ee:	01 37       	se_mr   r7,r3
 1f0:	34 ff 00 10 	e_stb   r7,16(r31)
			srcd_t->data[srcd_t->dtlen++]=(((uint16_t)sdata)<<8)|0x00FF;  //fill 0xFF to align uint16_t(two uint8_t )e.g. 0x8a -> 0x8aff
 1f4:	c7 7f       	se_lwz  r7,28(r31)
 1f6:	c1 77       	se_lwz  r7,4(r7)
 1f8:	18 a7 80 01 	e_addi  r5,r7,1
 1fc:	c7 6f       	se_lwz  r6,28(r31)
 1fe:	d1 56       	se_stw  r5,4(r6)
 200:	30 df 00 10 	e_lbz   r6,16(r31)
 204:	00 c6       	se_extzb r6
 206:	6c 86       	se_slwi r6,8
 208:	00 f6       	se_extsh r6
 20a:	18 c6 d0 ff 	e_ori   r6,r6,255
 20e:	00 f6       	se_extsh r6
 210:	00 e6       	se_extzh r6
 212:	c7 5f       	se_lwz  r5,28(r31)
 214:	6c 17       	se_slwi r7,1
 216:	7c e5 3a 14 	add     r7,r5,r7
 21a:	b4 67       	se_sth  r6,8(r7)
			checksum+=sdata;		/*checksum includes all data bytes + address uint8_t + length uint8_t, here is the last odd data uint8_t*/
 21c:	89 6f       	se_lbz  r6,9(r31)
 21e:	30 ff 00 10 	e_lbz   r7,16(r31)
 222:	7c e6 3a 14 	add     r7,r6,r7
 226:	99 7f       	se_stb  r7,9(r31)
			line+=2;
 228:	c6 7f       	se_lwz  r7,24(r31)
 22a:	20 17       	se_addi r7,2
 22c:	d6 7f       	se_stw  r7,24(r31)
		}

		if ( checksum + hex2value(line) == 0xFF ) /*check CRC checksum*/
 22e:	89 7f       	se_lbz  r7,9(r31)
 230:	74 fe 06 3f 	e_rlwinm r30,r7,0,24,31
 234:	c6 3f       	se_lwz  r3,24(r31)
 236:	78 00 00 01 	e_bl    236 <SRcdCvt+0x236>
			236: R_PPC_VLE_REL24	hex2value
 23a:	01 37       	se_mr   r7,r3
 23c:	7c fe 3a 14 	add     r7,r30,r7
 240:	70 07 98 ff 	e_cmp16i r7,255
 244:	7f 80 00 20 	e_mcrf  cr7
 248:	7c e0 00 26 	mfcr    r7
 24c:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
 250:	7c e8 01 20 	mtcrf   128,r7
 254:	7a 02 00 0a 	e_bne   25e <SRcdCvt+0x25e>
		    return SPASS;
 258:	48 07       	se_li   r7,0
 25a:	78 00 00 06 	e_b     260 <SRcdCvt+0x260>
		else
		    return SERR;
 25e:	48 17       	se_li   r7,1
}
 260:	01 73       	se_mr   r3,r7
 262:	19 7f 80 28 	e_addi  r11,r31,40
 266:	50 0b 00 04 	e_lwz   r0,4(r11)
 26a:	00 90       	se_mtlr r0
 26c:	1b cb 08 f8 	e_lmw   r30,-8(r11)
 270:	03 31       	se_mfar r1,r11
 272:	00 04       	se_blr

Disassembly of section .text.SrcdAlign4W:

00000000 <SrcdAlign4W>:
{   
   0:	18 21 06 d8 	e_stwu  r1,-40(r1)
   4:	d9 f1       	se_stw  r31,36(r1)
   6:	01 1f       	se_mr   r31,r1
   8:	d6 3f       	se_stw  r3,24(r31)
   a:	c6 7f       	se_lwz  r7,24(r31)
   c:	c0 77       	se_lwz  r7,0(r7)
   e:	2e 77       	se_andi r7,7
  10:	68 17       	se_srwi r7,1
    uint8_t  stype,adrlen,slength,sdata,sdtlen,oddflag=0;
  12:	9a 7f       	se_stb  r7,10(r31)
  14:	c6 7f       	se_lwz  r7,24(r31)
    uint8_t  checksum = 0;
  16:	c0 77       	se_lwz  r7,0(r7)
  18:	74 e6 02 39 	e_rlwinm r6,r7,0,8,28
    if(*line!='S')      /*S19 line must start with char 'S'*/
  1c:	c6 7f       	se_lwz  r7,24(r31)
  1e:	d0 67       	se_stw  r6,0(r7)
  20:	8a 7f       	se_lbz  r7,10(r31)
  22:	00 c7       	se_extzb r7
  24:	2a 07       	se_cmpi r7,0
  26:	7f 80 00 20 	e_mcrf  cr7
  2a:	7c e0 00 26 	mfcr    r7
  2e:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  32:	7c e8 01 20 	mtcrf   128,r7
  36:	7a 12 00 a4 	e_beq   da <SrcdAlign4W+0xda>
        srcd_t->dtlen=0;/*if not, the length set to zero and error report*/      
  3a:	c6 7f       	se_lwz  r7,24(r31)
  3c:	c1 77       	se_lwz  r7,4(r7)
		    return SERR;
  3e:	b4 7f       	se_sth  r7,8(r31)
  40:	78 00 00 3e 	e_b     7e <SrcdAlign4W+0x7e>
    line++;             /*move to next char*/
  44:	a4 7f       	se_lhz  r7,8(r31)
  46:	74 e6 04 3f 	e_rlwinm r6,r7,0,16,31
    stype = *line - '0';/*indentify the S19 line type*/	
  4a:	8a 7f       	se_lbz  r7,10(r31)
  4c:	00 c7       	se_extzb r7
  4e:	7c e6 3a 14 	add     r7,r6,r7
  52:	18 e7 84 ff 	e_addi  r7,r7,-1
	if(stype == 0)
  56:	a4 6f       	se_lhz  r6,8(r31)
  58:	00 e6       	se_extzh r6
  5a:	18 c6 84 ff 	e_addi  r6,r6,-1
  5e:	c6 5f       	se_lwz  r5,24(r31)
  60:	6c 16       	se_slwi r6,1
  62:	7c c5 32 14 	add     r6,r5,r6
  66:	a4 66       	se_lhz  r6,8(r6)
  68:	00 e6       	se_extzh r6
  6a:	c6 5f       	se_lwz  r5,24(r31)
  6c:	6c 17       	se_slwi r7,1
  6e:	7c e5 3a 14 	add     r7,r5,r7
		srcd_t->dtlen=0;
  72:	b4 67       	se_sth  r6,8(r7)
  74:	a4 7f       	se_lhz  r7,8(r31)
		return SFileStart;
  76:	00 e7       	se_extzh r7
  78:	18 e7 84 ff 	e_addi  r7,r7,-1
	else if(stype>6)
  7c:	b4 7f       	se_sth  r7,8(r31)
  7e:	a4 7f       	se_lhz  r7,8(r31)
  80:	00 e7       	se_extzh r7
  82:	2a 07       	se_cmpi r7,0
  84:	7f 80 00 20 	e_mcrf  cr7
  88:	7c e0 00 26 	mfcr    r7
  8c:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  90:	7c e8 01 20 	mtcrf   128,r7
  94:	7a 02 ff b0 	e_bne   44 <SrcdAlign4W+0x44>
			srcd_t->dtlen=0;
  98:	c6 7f       	se_lwz  r7,24(r31)
  9a:	c1 67       	se_lwz  r6,4(r7)
			return SFileEnd;
  9c:	8a 7f       	se_lbz  r7,10(r31)
  9e:	00 c7       	se_extzb r7
  a0:	04 76       	se_add  r6,r7
			 adrlen = stype+1;            /*adrlen(address length) is the number of bytes of addr. 16bit@2B, 24bit@3B, 32bit@4B*/
  a2:	c6 7f       	se_lwz  r7,24(r31)
  a4:	d1 67       	se_stw  r6,4(r7)
  a6:	78 00 00 14 	e_b     ba <SrcdAlign4W+0xba>
			 line++;
  aa:	8a 7f       	se_lbz  r7,10(r31)
  ac:	00 c7       	se_extzb r7
			 slength=hex2value(line);   /*get the bytes number of addr. data & checksum  */
  ae:	c6 6f       	se_lwz  r6,24(r31)
  b0:	6c 17       	se_slwi r7,1
  b2:	7c e6 3a 14 	add     r7,r6,r7
  b6:	2c 06       	se_bmaski r6,0
			 sdtlen=slength-adrlen-1;   /*get data length in bytes, remove one CRC uint8_t at line end */
  b8:	b4 67       	se_sth  r6,8(r7)
  ba:	8a 7f       	se_lbz  r7,10(r31)
  bc:	00 c7       	se_extzb r7
  be:	18 c7 84 ff 	e_addi  r6,r7,-1
  c2:	9a 6f       	se_stb  r6,10(r31)
  c4:	2a 07       	se_cmpi r7,0
			if(sdtlen&0x01)
  c6:	7f 80 00 20 	e_mcrf  cr7
  ca:	7c e0 00 26 	mfcr    r7
  ce:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  d2:	7c e8 01 20 	mtcrf   128,r7
  d6:	7a 02 ff d4 	e_bne   aa <SrcdAlign4W+0xaa>
  da:	78 00 00 1c 	e_b     f6 <SrcdAlign4W+0xf6>
  de:	c6 7f       	se_lwz  r7,24(r31)
  e0:	c1 77       	se_lwz  r7,4(r7)
				oddflag=1;             /*the last uint8_t will be trancated and processed later*/
  e2:	18 a7 80 01 	e_addi  r5,r7,1
			srcd_t->dtlen = (uint16_t)(sdtlen>>1);  /*data lenghth in uint16_t*/
  e6:	c6 6f       	se_lwz  r6,24(r31)
  e8:	d1 56       	se_stw  r5,4(r6)
  ea:	c6 6f       	se_lwz  r6,24(r31)
  ec:	6c 17       	se_slwi r7,1
  ee:	7c e6 3a 14 	add     r7,r6,r7
  f2:	2c 06       	se_bmaski r6,0
			checksum += slength;  /*checksum includes all data bytes + address uint8_t + length uint8_t, this is the length uint8_t*/
  f4:	b4 67       	se_sth  r6,8(r7)
  f6:	c6 7f       	se_lwz  r7,24(r31)
  f8:	c1 77       	se_lwz  r7,4(r7)
  fa:	2e 37       	se_andi r7,3
  fc:	2a 07       	se_cmpi r7,0
			line += 2;      	 /*increase 2byte text/per char */
  fe:	7f 80 00 20 	e_mcrf  cr7
 102:	7c e0 00 26 	mfcr    r7
			for(srcd_t->addr=0,i=0; i<adrlen; i++,line=line+2) /*get the S-record line address*/
 106:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
 10a:	7c e8 01 20 	mtcrf   128,r7
 10e:	7a 02 ff d0 	e_bne   de <SrcdAlign4W+0xde>
			    sdata = hex2value(line);                  /*the uint8_t from 2 chars*/
 112:	19 7f 80 28 	e_addi  r11,r31,40
 116:	53 eb ff fc 	e_lwz   r31,-4(r11)
 11a:	03 31       	se_mfar r1,r11
 11c:	00 04       	se_blr

Disassembly of section .text.hex2value:

00000000 <hex2value>:
{   
   0:	18 21 06 d8 	e_stwu  r1,-40(r1)
   4:	d9 f1       	se_stw  r31,36(r1)
   6:	01 1f       	se_mr   r31,r1
   8:	d6 3f       	se_stw  r3,24(r31)
   a:	c6 7f       	se_lwz  r7,24(r31)
   c:	80 77       	se_lbz  r7,0(r7)
   e:	98 7f       	se_stb  r7,8(r31)
  10:	c6 7f       	se_lwz  r7,24(r31)
    uint8_t  stype,adrlen,slength,sdata,sdtlen,oddflag=0;
  12:	20 07       	se_addi r7,1
  14:	d6 7f       	se_stw  r7,24(r31)
    uint8_t  checksum = 0;
  16:	c6 7f       	se_lwz  r7,24(r31)
  18:	80 77       	se_lbz  r7,0(r7)
    if(*line!='S')      /*S19 line must start with char 'S'*/
  1a:	99 7f       	se_stb  r7,9(r31)
  1c:	c6 7f       	se_lwz  r7,24(r31)
  1e:	20 07       	se_addi r7,1
  20:	d6 7f       	se_stw  r7,24(r31)
  22:	88 7f       	se_lbz  r7,8(r31)
  24:	00 c7       	se_extzb r7
  26:	70 07 a8 2f 	e_cmpl16i r7,47
  2a:	7f 80 00 20 	e_mcrf  cr7
  2e:	7c e0 00 26 	mfcr    r7
  32:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  36:	7c e8 01 20 	mtcrf   128,r7
        srcd_t->dtlen=0;/*if not, the length set to zero and error report*/      
  3a:	7a 01 00 2c 	e_ble   66 <hex2value+0x66>
		    return SERR;
  3e:	88 7f       	se_lbz  r7,8(r31)
  40:	00 c7       	se_extzb r7
  42:	70 07 a8 39 	e_cmpl16i r7,57
    line++;             /*move to next char*/
  46:	7f 80 00 20 	e_mcrf  cr7
    stype = *line - '0';/*indentify the S19 line type*/	
  4a:	7c e0 00 26 	mfcr    r7
  4e:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  52:	7c e8 01 20 	mtcrf   128,r7
	if(stype == 0)
  56:	7a 11 00 10 	e_bgt   66 <hex2value+0x66>
  5a:	88 7f       	se_lbz  r7,8(r31)
  5c:	18 e7 84 d0 	e_addi  r7,r7,-48
  60:	98 7f       	se_stb  r7,8(r31)
  62:	78 00 00 0c 	e_b     6e <hex2value+0x6e>
  66:	88 7f       	se_lbz  r7,8(r31)
  68:	18 e7 84 c9 	e_addi  r7,r7,-55
  6c:	98 7f       	se_stb  r7,8(r31)
  6e:	89 7f       	se_lbz  r7,9(r31)
		srcd_t->dtlen=0;
  70:	00 c7       	se_extzb r7
  72:	70 07 a8 2f 	e_cmpl16i r7,47
		return SFileStart;
  76:	7f 80 00 20 	e_mcrf  cr7
  7a:	7c e0 00 26 	mfcr    r7
	else if(stype>6)
  7e:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
  82:	7c e8 01 20 	mtcrf   128,r7
  86:	7a 01 00 2c 	e_ble   b2 <hex2value+0xb2>
  8a:	89 7f       	se_lbz  r7,9(r31)
  8c:	00 c7       	se_extzb r7
  8e:	70 07 a8 39 	e_cmpl16i r7,57
  92:	7f 80 00 20 	e_mcrf  cr7
			srcd_t->dtlen=0;
  96:	7c e0 00 26 	mfcr    r7
  9a:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
			return SFileEnd;
  9e:	7c e8 01 20 	mtcrf   128,r7
			 adrlen = stype+1;            /*adrlen(address length) is the number of bytes of addr. 16bit@2B, 24bit@3B, 32bit@4B*/
  a2:	7a 11 00 10 	e_bgt   b2 <hex2value+0xb2>
  a6:	89 7f       	se_lbz  r7,9(r31)
			 line++;
  a8:	18 e7 84 d0 	e_addi  r7,r7,-48
  ac:	99 7f       	se_stb  r7,9(r31)
			 slength=hex2value(line);   /*get the bytes number of addr. data & checksum  */
  ae:	78 00 00 0c 	e_b     ba <hex2value+0xba>
  b2:	89 7f       	se_lbz  r7,9(r31)
  b4:	18 e7 84 c9 	e_addi  r7,r7,-55
			 sdtlen=slength-adrlen-1;   /*get data length in bytes, remove one CRC uint8_t at line end */
  b8:	99 7f       	se_stb  r7,9(r31)
  ba:	88 7f       	se_lbz  r7,8(r31)
  bc:	6c 47       	se_slwi r7,4
  be:	74 e6 06 3f 	e_rlwinm r6,r7,0,24,31
  c2:	89 7f       	se_lbz  r7,9(r31)
  c4:	7c e6 3a 14 	add     r7,r6,r7
			if(sdtlen&0x01)
  c8:	00 c7       	se_extzb r7
  ca:	01 73       	se_mr   r3,r7
  cc:	19 7f 80 28 	e_addi  r11,r31,40
  d0:	53 eb ff fc 	e_lwz   r31,-4(r11)
  d4:	03 31       	se_mfar r1,r11
  d6:	00 04       	se_blr

Disassembly of section .text.RcvDtProc:

00000000 <RcvDtProc>:
{   
   0:	18 21 06 c8 	e_stwu  r1,-56(r1)
   4:	00 80       	se_mflr r0
   6:	df 01       	se_stw  r0,60(r1)
   8:	dd f1       	se_stw  r31,52(r1)
   a:	01 1f       	se_mr   r31,r1
   c:	70 e0 e0 00 	e_lis   r7,0
			c: R_PPC_VLE_HA16A	CAN_TxMsg
  10:	1c e7 00 00 	e_add16i r7,r7,0
			12: R_PPC_ADDR16_LO	CAN_TxMsg
    uint8_t  stype,adrlen,slength,sdata,sdtlen,oddflag=0;
  14:	70 c0 00 c8 	e_li    r6,200
    uint8_t  checksum = 0;
  18:	d2 67       	se_stw  r6,8(r7)
    if(*line!='S')      /*S19 line must start with char 'S'*/
  1a:	70 e0 e0 00 	e_lis   r7,0
			1a: R_PPC_VLE_HA16A	CAN_TxMsg
  1e:	1c e7 00 00 	e_add16i r7,r7,0
			20: R_PPC_ADDR16_LO	CAN_TxMsg
  22:	48 06       	se_li   r6,0
  24:	d3 67       	se_stw  r6,12(r7)
  26:	70 e0 e0 00 	e_lis   r7,0
			26: R_PPC_VLE_HA16A	CAN_TxMsg
  2a:	1c e7 00 00 	e_add16i r7,r7,0
			2c: R_PPC_ADDR16_LO	CAN_TxMsg
  2e:	48 06       	se_li   r6,0
  30:	d0 67       	se_stw  r6,0(r7)
  32:	70 e0 e0 00 	e_lis   r7,0
			32: R_PPC_VLE_HA16A	CAN_TxMsg
  36:	1c e7 00 00 	e_add16i r7,r7,0
			38: R_PPC_ADDR16_LO	CAN_TxMsg
        srcd_t->dtlen=0;/*if not, the length set to zero and error report*/      
  3a:	48 16       	se_li   r6,1
  3c:	d4 67       	se_stw  r6,16(r7)
		    return SERR;
  3e:	70 e0 e0 00 	e_lis   r7,0
			3e: R_PPC_VLE_HA16A	CAN_TxMsg
  42:	1c e7 00 00 	e_add16i r7,r7,0
			44: R_PPC_ADDR16_LO	CAN_TxMsg
    line++;             /*move to next char*/
  46:	70 df 7f c2 	e_li    r6,-62
    stype = *line - '0';/*indentify the S19 line type*/	
  4a:	34 c7 00 14 	e_stb   r6,20(r7)
  4e:	70 e0 e0 00 	e_lis   r7,0
			4e: R_PPC_VLE_HA16A	CAN_TxMsg
  52:	1c e7 00 00 	e_add16i r7,r7,0
			54: R_PPC_ADDR16_LO	CAN_TxMsg
	if(stype == 0)
  56:	c0 37       	se_lwz  r3,0(r7)
  58:	c1 47       	se_lwz  r4,4(r7)
  5a:	c2 57       	se_lwz  r5,8(r7)
  5c:	c3 67       	se_lwz  r6,12(r7)
  5e:	d4 3f       	se_stw  r3,16(r31)
  60:	d5 4f       	se_stw  r4,20(r31)
  62:	d6 5f       	se_stw  r5,24(r31)
  64:	d7 6f       	se_stw  r6,28(r31)
  66:	c4 47       	se_lwz  r4,16(r7)
  68:	c5 57       	se_lwz  r5,20(r7)
  6a:	c6 67       	se_lwz  r6,24(r7)
  6c:	c7 77       	se_lwz  r7,28(r7)
  6e:	d8 4f       	se_stw  r4,32(r31)
		srcd_t->dtlen=0;
  70:	d9 5f       	se_stw  r5,36(r31)
  72:	da 6f       	se_stw  r6,40(r31)
  74:	db 7f       	se_stw  r7,44(r31)
		return SFileStart;
  76:	18 ff 80 10 	e_addi  r7,r31,16
  7a:	48 03       	se_li   r3,0
	else if(stype>6)
  7c:	01 74       	se_mr   r4,r7
  7e:	78 00 00 01 	e_bl    7e <RcvDtProc+0x7e>
			7e: R_PPC_VLE_REL24	CAN0_TransmitMsg
  82:	70 e0 e0 00 	e_lis   r7,0
			82: R_PPC_VLE_HA16A	CAN0_BufferReceive_Flag
  86:	48 16       	se_li   r6,1
  88:	34 c7 00 00 	e_stb   r6,0(r7)
			8a: R_PPC_ADDR16_LO	CAN0_BufferReceive_Flag
  8c:	19 7f 80 38 	e_addi  r11,r31,56
  90:	50 0b 00 04 	e_lwz   r0,4(r11)
  94:	00 90       	se_mtlr r0
			srcd_t->dtlen=0;
  96:	53 eb ff fc 	e_lwz   r31,-4(r11)
  9a:	03 31       	se_mfar r1,r11
			return SFileEnd;
  9c:	00 04       	se_blr

Disassembly of section .text.StatusAck:

00000000 <StatusAck>:
{   
   0:	18 21 06 c8 	e_stwu  r1,-56(r1)
   4:	00 80       	se_mflr r0
   6:	df 01       	se_stw  r0,60(r1)
   8:	dd f1       	se_stw  r31,52(r1)
   a:	01 1f       	se_mr   r31,r1
   c:	01 37       	se_mr   r7,r3
   e:	98 7f       	se_stb  r7,8(r31)
  10:	70 e0 e0 00 	e_lis   r7,0
			10: R_PPC_VLE_HA16A	CAN_TxMsg
    uint8_t  stype,adrlen,slength,sdata,sdtlen,oddflag=0;
  14:	1c e7 00 00 	e_add16i r7,r7,0
			16: R_PPC_ADDR16_LO	CAN_TxMsg
    uint8_t  checksum = 0;
  18:	70 c0 00 c8 	e_li    r6,200
    if(*line!='S')      /*S19 line must start with char 'S'*/
  1c:	d2 67       	se_stw  r6,8(r7)
  1e:	70 e0 e0 00 	e_lis   r7,0
			1e: R_PPC_VLE_HA16A	CAN_TxMsg
  22:	1c e7 00 00 	e_add16i r7,r7,0
			24: R_PPC_ADDR16_LO	CAN_TxMsg
  26:	48 06       	se_li   r6,0
  28:	d3 67       	se_stw  r6,12(r7)
  2a:	70 e0 e0 00 	e_lis   r7,0
			2a: R_PPC_VLE_HA16A	CAN_TxMsg
  2e:	1c e7 00 00 	e_add16i r7,r7,0
			30: R_PPC_ADDR16_LO	CAN_TxMsg
  32:	48 06       	se_li   r6,0
  34:	d0 67       	se_stw  r6,0(r7)
  36:	70 e0 e0 00 	e_lis   r7,0
			36: R_PPC_VLE_HA16A	CAN_TxMsg
        srcd_t->dtlen=0;/*if not, the length set to zero and error report*/      
  3a:	1c e7 00 00 	e_add16i r7,r7,0
			3c: R_PPC_ADDR16_LO	CAN_TxMsg
		    return SERR;
  3e:	48 16       	se_li   r6,1
  40:	d4 67       	se_stw  r6,16(r7)
  42:	70 e0 e0 00 	e_lis   r7,0
			42: R_PPC_VLE_HA16A	CAN_TxMsg
    line++;             /*move to next char*/
  46:	1c e7 00 00 	e_add16i r7,r7,0
			48: R_PPC_ADDR16_LO	CAN_TxMsg
    stype = *line - '0';/*indentify the S19 line type*/	
  4a:	88 6f       	se_lbz  r6,8(r31)
  4c:	34 c7 00 14 	e_stb   r6,20(r7)
  50:	70 e0 e0 00 	e_lis   r7,0
			50: R_PPC_VLE_HA16A	CAN_TxMsg
  54:	1c e7 00 00 	e_add16i r7,r7,0
			56: R_PPC_ADDR16_LO	CAN_TxMsg
	if(stype == 0)
  58:	c0 37       	se_lwz  r3,0(r7)
  5a:	c1 47       	se_lwz  r4,4(r7)
  5c:	c2 57       	se_lwz  r5,8(r7)
  5e:	c3 67       	se_lwz  r6,12(r7)
  60:	d4 3f       	se_stw  r3,16(r31)
  62:	d5 4f       	se_stw  r4,20(r31)
  64:	d6 5f       	se_stw  r5,24(r31)
  66:	d7 6f       	se_stw  r6,28(r31)
  68:	c4 47       	se_lwz  r4,16(r7)
  6a:	c5 57       	se_lwz  r5,20(r7)
  6c:	c6 67       	se_lwz  r6,24(r7)
  6e:	c7 77       	se_lwz  r7,28(r7)
		srcd_t->dtlen=0;
  70:	d8 4f       	se_stw  r4,32(r31)
  72:	d9 5f       	se_stw  r5,36(r31)
  74:	da 6f       	se_stw  r6,40(r31)
		return SFileStart;
  76:	db 7f       	se_stw  r7,44(r31)
  78:	18 ff 80 10 	e_addi  r7,r31,16
	else if(stype>6)
  7c:	48 03       	se_li   r3,0
  7e:	01 74       	se_mr   r4,r7
  80:	78 00 00 01 	e_bl    80 <StatusAck+0x80>
			80: R_PPC_VLE_REL24	CAN0_TransmitMsg
  84:	19 7f 80 38 	e_addi  r11,r31,56
  88:	50 0b 00 04 	e_lwz   r0,4(r11)
  8c:	00 90       	se_mtlr r0
  8e:	53 eb ff fc 	e_lwz   r31,-4(r11)
  92:	03 31       	se_mfar r1,r11
  94:	00 04       	se_blr

Disassembly of section .text.CleanRAM:

00000000 <CleanRAM>:
{   
   0:	18 21 06 e0 	e_stwu  r1,-32(r1)
   4:	d7 f1       	se_stw  r31,28(r1)
   6:	01 1f       	se_mr   r31,r1
   8:	70 f0 08 00 	e_li    r7,98304
   c:	d2 7f       	se_stw  r7,8(r31)
   e:	62 17       	se_bgeni r7,1
  10:	d3 7f       	se_stw  r7,12(r31)
    uint8_t  stype,adrlen,slength,sdata,sdtlen,oddflag=0;
  12:	78 00 00 10 	e_b     22 <CleanRAM+0x22>
    uint8_t  checksum = 0;
  16:	c3 7f       	se_lwz  r7,12(r31)
  18:	18 c7 80 04 	e_addi  r6,r7,4
    if(*line!='S')      /*S19 line must start with char 'S'*/
  1c:	d3 6f       	se_stw  r6,12(r31)
  1e:	48 06       	se_li   r6,0
  20:	d0 67       	se_stw  r6,0(r7)
  22:	c2 7f       	se_lwz  r7,8(r31)
  24:	18 c7 84 ff 	e_addi  r6,r7,-1
  28:	d2 6f       	se_stw  r6,8(r31)
  2a:	2a 07       	se_cmpi r7,0
  2c:	7f 80 00 20 	e_mcrf  cr7
  30:	7c e0 00 26 	mfcr    r7
  34:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
        srcd_t->dtlen=0;/*if not, the length set to zero and error report*/      
  38:	7c e8 01 20 	mtcrf   128,r7
  3c:	7a 02 ff da 	e_bne   16 <CleanRAM+0x16>
		    return SERR;
  40:	63 17       	se_bgeni r7,17
  42:	d2 7f       	se_stw  r7,8(r31)
    line++;             /*move to next char*/
  44:	70 ea e0 80 	e_lis   r7,20608
  48:	d3 7f       	se_stw  r7,12(r31)
    stype = *line - '0';/*indentify the S19 line type*/	
  4a:	78 00 00 10 	e_b     5a <CleanRAM+0x5a>
  4e:	c3 7f       	se_lwz  r7,12(r31)
  50:	18 c7 80 04 	e_addi  r6,r7,4
  54:	d3 6f       	se_stw  r6,12(r31)
	if(stype == 0)
  56:	48 06       	se_li   r6,0
  58:	d0 67       	se_stw  r6,0(r7)
  5a:	c2 7f       	se_lwz  r7,8(r31)
  5c:	18 c7 84 ff 	e_addi  r6,r7,-1
  60:	d2 6f       	se_stw  r6,8(r31)
  62:	2a 07       	se_cmpi r7,0
  64:	7f 80 00 20 	e_mcrf  cr7
  68:	7c e0 00 26 	mfcr    r7
  6c:	74 e7 e0 07 	e_rlwinm r7,r7,28,0,3
		srcd_t->dtlen=0;
  70:	7c e8 01 20 	mtcrf   128,r7
  74:	7a 02 ff da 	e_bne   4e <CleanRAM+0x4e>
		return SFileStart;
  78:	19 7f 80 20 	e_addi  r11,r31,32
	else if(stype>6)
  7c:	53 eb ff fc 	e_lwz   r31,-4(r11)
  80:	03 31       	se_mfar r1,r11
  82:	00 04       	se_blr

Disassembly of section .text.Prepare_Before_Jump:

00000000 <Prepare_Before_Jump>:
{   
   0:	18 21 06 f0 	e_stwu  r1,-16(r1)
   4:	00 80       	se_mflr r0
   6:	d5 01       	se_stw  r0,20(r1)
   8:	d3 f1       	se_stw  r31,12(r1)
   a:	01 1f       	se_mr   r31,r1
   c:	78 00 00 01 	e_bl    c <Prepare_Before_Jump+0xc>
			c: R_PPC_VLE_REL24	flexcan_0_deinit_fnc
  10:	7c 00 01 46 	wrteei  0
    uint8_t  stype,adrlen,slength,sdata,sdtlen,oddflag=0;
  14:	78 00 00 01 	e_bl    14 <Prepare_Before_Jump+0x14>
			14: R_PPC_VLE_REL24	CleanRAM
    uint8_t  checksum = 0;
  18:	19 7f 80 10 	e_addi  r11,r31,16
    if(*line!='S')      /*S19 line must start with char 'S'*/
  1c:	50 0b 00 04 	e_lwz   r0,4(r11)
  20:	00 90       	se_mtlr r0
  22:	53 eb ff fc 	e_lwz   r31,-4(r11)
  26:	03 31       	se_mfar r1,r11
  28:	00 04       	se_blr
